#!/usr/bin/env ruby

require 'gli'
include GLI::App

program_desc <<EOT
The Developer-Focused Job Platform

#{File.read(File.expand_path('../logo.txt', __FILE__))}
EOT

flag [:s,:session], :default_value => File.join(ENV['HOME'],'.honeypot_cli')

pre do |global_options,command,options,args|
  $session = SessionFile.new(global_options[:session])
end

desc 'Create an account on honeypot'
command :signup do |c|
  c.desc 'Provide github username'
  c.flag [:g, :github]
  c.desc 'Provide linkedin username'
  c.flag [:l, :linkedin]

  c.action do |global_options,options,args|
    help_now!('email is required') if args.empty?
    user = UserCreation.new(args.first, options)
    $session.store(user.to_h)
    puts "Your profile has been created #{user.name || user.email}!"
    puts "please confirm your email to get accepted to a Batch"
  end
end

desc 'Show your profile'
command :profile do |c|
  c.action do |global_options,options,args|
    puts File.open($session.path).read
  end
end

desc 'Open your profile on www.honeypot.io'
command :open do |c|
  c.action do |global_options,options,args|
    require 'launchy'
    # profile_link = 'https://demo.honeypot.io/profile'
    profile_link = 'https://demo.honeypot.io/company/talents/408'
    puts "Opening profile link #{profile_link} ...."
    Launchy.open profile_link
  end
end

class UserCreation
  def initialize(email, options={})
    @email = email
    @options = options
  end

  attr_reader :email

  def name
    return "Hugo Duksis" if email == 'hugo@honeypot.io'
  end

  def to_h
    password
    {
      'email' => email,
      'name' => name,
      'github' => options[:github].to_s,
      'linkedin' => options[:linkedin].to_s,
      'start_date' => start_date
    }
  end

  private
  attr_reader :options

  def password
    print("Provide password: ")
    $stdin.readline.chomp
  end

  def start_date
    @_start_date ||= begin
      print("Earliest start date dd-mm-yyyy: ")
      $stdin.readline.chomp
    end
  end
end

class SessionFile
  require 'yaml'

  def initialize(path)
    @path = path
  end

  def store(data)
    File.open(path, 'w') {|f| f.write data.to_yaml }.tap{
      sleep 1 # replicate api call ¯\_(ツ)_/¯
    }
  end

  attr_reader :path

  private
  def load
    YAML::load_file(path)
  end
end

exit run(ARGV)
